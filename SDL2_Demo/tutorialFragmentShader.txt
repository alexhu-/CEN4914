#version 330 core

struct DirectionalLight
{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

vec4 getColor(DirectionalLight light, vec3 vertexPosition, vec3 vertexNormal, vec3 texture, float shininess, vec3 lightColor);

in vec3 normal_modelspace;
in vec3 position_modelspace;
in vec2 TexCoords;

out vec4 outColor;

uniform vec3 eye;
uniform DirectionalLight light;
uniform vec3 light_color;
uniform float material_shininess;
uniform sampler2D texture_sampler;

void main()
{
	outColor = getColor(light, position_modelspace, normal_modelspace, vec3(texture(texture_sampler, TexCoords)), 16.0, light_color);
}

vec4 getColor(DirectionalLight light, vec3 vertexPosition, vec3 vertexNormal, vec3 texture, float shininess, vec3 lightColor)
{
	// some variables
	vec3 norm = normalize(vertexNormal);
	vec3 lightDirection = normalize(-light.direction);
	vec3 eyeDirection = normalize(eye - vertexPosition);
	vec3 reflectDirection = reflect(-lightDirection, norm);

	// ambient setting
	vec3 ambient = light.ambient * texture;
	
	// diffuse setting
	float diffuseContribution = max(dot(norm, lightDirection), 0.0);
	vec3 diffuse = diffuseContribution * light.diffuse * texture;

	// specular setting
	float specularContribution = pow(max(dot(eyeDirection, reflectDirection), 0.0), shininess);
	vec3 specular = specularContribution * light.specular * texture;

	return vec4(lightColor * (ambient + diffuse + specular), 1.0);
}